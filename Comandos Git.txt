comandos git:
Obs.: Onde houver aspas simples, é pq são apenas para destacar algo. Aspas duplas significam que elas devem estar escritas no código.
- Para iniciar uma pasta como repositorio:
	Instalar o Git no computador
	Clicar com o direito > Git Bash Here
	Irá abrir a tela para digitar comandos
	Digitar o comando 'git init' para iniciar o git na pasta atual
	Um arquivo oculto será criado na pasta, caso dê certo

- Para saber o status dos arquivos da pasta atual, digitar git status
	O texto 'No commits yet' significa que ainda não há nenhum controle de versão no momento
	Em "Untracked Files:" ele irá dizer qual arquivo ainda não foi adicionado no controle de versões

- Para adicionar um novo arquivo, usar o comando git add "nome do arquivo.formato" (nome do arquivo entre aspas duplas)

- Caso seja necessário acrescentar todos os arquivos da pasta de uma só vez, usar 'git add .' (sem aspas)

- Agora, para criar a primeira versão deles:
	Para isso, usa-se o comando 'git commit -m "mensagem para identificar aquela versão"'
	Como boa prática, costuma-se chamar a primeira versão de commit inicial
	Ao usar este comando pela primeira vez, ele irá avisar que não há e-mail/conta configurada para salvar aquela versão
	A propria tela com o erro irá mostrar os comandos que precisam ser usados
	git config --global user.email "andreafonso.aj@gmail.com
	git config --global user.name "Andre Anastacio"
	Após usar estes dois comandos, dessa vez sim poderá usar 'git commit -m "mensagem para identificar aquela versão"'

- Em seguida, pode-se usar o comando git push para enviar os arquivos para a nuvem
	Primeiro, é necessário definir o link do projeto na nuvem
	Para isso, ir até a página do github na web
	Lado superior direito da tela, clicar no + e depois em New Repository
	Colocar nome e sempre marcar "Add a README file
	Clicar em Create Repository

- Com o link do repositorio criado:
	Voltar para o console do git
	usar o comando git remote add origin 'link do repositorio criado' (sempre clicar com o direito e colar, não dá ctrl+v)
	em caso de link incorreto, usar o comando git remote set-url origin 'link correto'
	Uma janela será aberta para fazer o login no github. Logar e autorizar
	Caso tudo dê certo, o Master Branch vai ser criado e aparecer na pagina do projeto no Git Hub

- A partir de agora, a primeira versão dos arquivos foram criados

- Para criar uma nova versão:
	Usar o comando 'git status' para ver os novos arquivos
	Usar 'git add .' ou 'git add nome do arquivo' para adicionar os novos arquivos
	Criar uma nova versão usando git commit -m "nome para descrever nova versão"

- Para identificar um historico de versões, usar o comando git reflog
	O console irá mostrar várias linhas, cada uma delas representando uma das versões juntamente com sua respectiva ID (número)
	exibido no começo da linha)

- Para transitar entre diferentes versões
	Observar qual a ID da versão desejada usando o comando git reflog
	Usar o comando git reset --hard 'id da versão desejada'

- Muitas vezes, poderá ser necessário criar Branchs diferentes, mantendo uma "master" como principal e outras versões onde 
novas funcionalidades serão testadas

- Para identificar as Branches atuais, usar o comando git branch
	A Branch marcada de verde e com um asterisco, é a Branch onde estivermos trabalhando no momento

- Para criar uma nova Branch:
	Usar o comando git branch 'nome para identificar a nova versão'
	Costuma-se chamar essa versão onde coisas novas serão testadas de "staging"

- Para criar uma nova Branch e já trocar pra ela:
	usar o comando git checkout -b 'nome da branch' 'nome da branch base para a copia'

- Para transitar entre as Branches existentes
	git checkout 'nome da branch'
	A partir daqui, todas as alterações feitas estarão nesta nova Branch
	Para prosseguir com o upload da nova versão:
	usar git add nos arquivos modificados
	usar git commit -m "descrição da versão" para criar a nova versão
	usar git push para fazer o upload
	caso seja a primeira vez nessa branch, usar o comando mostrado na tela para resolver o erro
	a Branch será criada e aparecerá na página do projeto no github


- Ao utilizar Branches diferentes, é possível usar "merge" para unir as duas versões
	Passo 1 é estar na Branch que deverá ser a principal. No caso deste exemplo, voltamos para a Master
	usar o comando git merge staging (pegar as atualizações da staging e fundir com a Master)
	
- É importante antes de fazer o Merge, certificar de estar nas versões mais recentes do arquivo para evitar desencontros e erros
	Ao retornar para a Branch Principal (Master) usar o comando git pull

- Resumindo, o fluxo de Branches é:
	git pull da branch principal
	gerar uma nova branch a partir da branch principal
	trabalhar e adicionar novas funcionalidades na nova branch
	finalizar o trabalho na nova branch
	git checkout para voltar para a branch principal
	git pull para certificar de que está na versão mais recente dos arquivos
	mergiar (unir) o código da branch nova na branch principal (depois de testar)
	git push da branch principal

- Existe um processo chamado "pull request", que é quando um programador vai validar o código que foi feito na branch
secundária antes de permitir o Merge, para evitar erros



